{"version":3,"names":["RefContext","React","createContext","undefined","RefProvider","children","flatListRef","value","useSetupRefs","useRefs","useContext","Error","flatListRefProp","props","useProps","animationConfig","DEFAULT_PROPS","propsRef","useRef","current","animConfig","useMemo","animationConfigRef","useSharedValue","useEffect","cellDataRef","Map","keyToIndexRef","containerRef","flatlistRefInternal","flatlistRef","scrollViewRef","refs"],"sources":["refContext.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { useMemo, useRef } from \"react\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport Animated, { type SharedValue, useSharedValue, WithSpringConfig } from \"react-native-reanimated\";\nimport { DEFAULT_PROPS } from \"../constants\";\nimport { useProps } from \"./propsContext\";\nimport { CellData, DraggableFlatListProps } from \"../types\";\n\ntype RefContextValue<T> = {\n  propsRef: React.MutableRefObject<DraggableFlatListProps<T>>;\n  animationConfigRef: SharedValue<WithSpringConfig>;\n  cellDataRef: React.MutableRefObject<Map<string, CellData>>;\n  keyToIndexRef: React.MutableRefObject<Map<string, number>>;\n  containerRef: React.RefObject<Animated.View>;\n  flatlistRef: React.RefObject<FlatList<T>> | React.ForwardedRef<FlatList<T>>;\n  scrollViewRef: React.RefObject<Animated.ScrollView>;\n};\nconst RefContext = React.createContext<RefContextValue<any> | undefined>(\n  undefined\n);\n\nexport default function RefProvider<T>({\n  children,\n  flatListRef,\n}: {\n  children: React.ReactNode;\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const value = useSetupRefs<T>({ flatListRef });\n  return <RefContext.Provider value={value}>{children}</RefContext.Provider>;\n}\n\nexport function useRefs<T>() {\n  const value = useContext(RefContext);\n  if (!value) {\n    throw new Error(\n      \"useRefs must be called from within a RefContext.Provider!\"\n    );\n  }\n  return value as RefContextValue<T>;\n}\n\nfunction useSetupRefs<T>({\n  flatListRef: flatListRefProp,\n}: {\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const props = useProps<T>();\n  const { animationConfig = DEFAULT_PROPS.animationConfig } = props;\n\n  const propsRef = useRef(props);\n  propsRef.current = props;\n  const animConfig = useMemo(\n    () => ({\n      ...DEFAULT_PROPS.animationConfig,\n      ...animationConfig,\n    } as WithSpringConfig),\n    [animationConfig]\n  );\n\n  const animationConfigRef = useSharedValue(animConfig);\n  useEffect(() => {\n    animationConfigRef.value = animConfig;\n  }, [animConfig]);\n\n  const cellDataRef = useRef(new Map<string, CellData>());\n  const keyToIndexRef = useRef(new Map<string, number>());\n  const containerRef = useRef<Animated.View>(null);\n  const flatlistRefInternal = useRef<FlatList<T>>(null);\n  const flatlistRef = flatListRefProp || flatlistRefInternal;\n  const scrollViewRef = useRef<Animated.ScrollView>(null);\n\n  // useEffect(() => {\n  //   // This is a workaround for the fact that RN does not respect refs passed in\n  //   // to renderScrollViewComponent underlying ScrollView (currently not used but\n  //   // may need to add if we want to use reanimated scrollTo in the future)\n  //   //@ts-ignore\n  //   const scrollRef = flatlistRef.current?.getNativeScrollRef();\n  //   if (!scrollViewRef.current) {\n  //     //@ts-ignore\n  //     scrollViewRef(scrollRef);\n  //   }\n  // }, []);\n\n  const refs = useMemo(\n    () => ({\n      animationConfigRef,\n      cellDataRef,\n      containerRef,\n      flatlistRef,\n      keyToIndexRef,\n      propsRef,\n      scrollViewRef,\n    }),\n    []\n  );\n\n  return refs;\n}\n"],"mappings":"6GAAA,qDAGA,8DACA,uCACA,4C,smCAYA,GAAMA,WAAU,CAAGC,cAAA,CAAMC,aAAN,CACjBC,SADiB,CAAnB,CAIe,QAASC,YAAT,MAMZ,IALDC,SAKC,MALDA,QAKC,CAJDC,WAIC,MAJDA,WAIC,CACD,GAAMC,MAAK,CAAGC,YAAY,CAAI,CAAEF,WAAW,CAAXA,WAAF,CAAJ,CAA1B,CACA,MAAO,8BAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAEC,KAA5B,6EAAoCF,QAApC,CAAP,CACD,CAEM,QAASI,QAAT,EAAsB,CAC3B,GAAMF,MAAK,CAAG,GAAAG,iBAAA,EAAWV,UAAX,CAAd,CACA,GAAI,CAACO,KAAL,CAAY,CACV,KAAM,IAAII,MAAJ,CACJ,2DADI,CAAN,CAGD,CACD,MAAOJ,MAAP,CACD,CAED,QAASC,aAAT,OAIG,IAHYI,gBAGZ,OAHDN,WAGC,CACD,GAAMO,MAAK,CAAG,GAAAC,sBAAA,GAAd,CADC,0BAE2DD,KAF3D,CAEOE,eAFP,CAEOA,eAFP,gCAEyBC,wBAAA,CAAcD,eAFvC,uBAID,GAAME,SAAQ,CAAG,GAAAC,aAAA,EAAOL,KAAP,CAAjB,CACAI,QAAQ,CAACE,OAAT,CAAmBN,KAAnB,CACA,GAAMO,WAAU,CAAG,GAAAC,cAAA,EACjB,mCACKL,wBAAA,CAAcD,eADnB,CAEKA,eAFL,GADiB,CAKjB,CAACA,eAAD,CALiB,CAAnB,CAQA,GAAMO,mBAAkB,CAAG,GAAAC,qCAAA,EAAeH,UAAf,CAA3B,CACA,GAAAI,gBAAA,EAAU,UAAM,CACdF,kBAAkB,CAACf,KAAnB,CAA2Ba,UAA3B,CACD,CAFD,CAEG,CAACA,UAAD,CAFH,EAIA,GAAMK,YAAW,CAAG,GAAAP,aAAA,EAAO,GAAIQ,IAAJ,EAAP,CAApB,CACA,GAAMC,cAAa,CAAG,GAAAT,aAAA,EAAO,GAAIQ,IAAJ,EAAP,CAAtB,CACA,GAAME,aAAY,CAAG,GAAAV,aAAA,EAAsB,IAAtB,CAArB,CACA,GAAMW,oBAAmB,CAAG,GAAAX,aAAA,EAAoB,IAApB,CAA5B,CACA,GAAMY,YAAW,CAAGlB,eAAe,EAAIiB,mBAAvC,CACA,GAAME,cAAa,CAAG,GAAAb,aAAA,EAA4B,IAA5B,CAAtB,CAcA,GAAMc,KAAI,CAAG,GAAAX,cAAA,EACX,iBAAO,CACLC,kBAAkB,CAAlBA,kBADK,CAELG,WAAW,CAAXA,WAFK,CAGLG,YAAY,CAAZA,YAHK,CAILE,WAAW,CAAXA,WAJK,CAKLH,aAAa,CAAbA,aALK,CAMLV,QAAQ,CAARA,QANK,CAOLc,aAAa,CAAbA,aAPK,CAAP,EADW,CAUX,EAVW,CAAb,CAaA,MAAOC,KAAP,CACD"}